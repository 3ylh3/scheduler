// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: apiserver/addjob/add_job.proto

package addjob

import (
	context "context"
	job "github.com/3ylh3/scheduler/apiserver/job"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddJobClient is the client API for AddJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddJobClient interface {
	AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*job.JobInfo, error)
}

type addJobClient struct {
	cc grpc.ClientConnInterface
}

func NewAddJobClient(cc grpc.ClientConnInterface) AddJobClient {
	return &addJobClient{cc}
}

func (c *addJobClient) AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*job.JobInfo, error) {
	out := new(job.JobInfo)
	err := c.cc.Invoke(ctx, "/addjob.AddJob/AddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddJobServer is the server API for AddJob service.
// All implementations must embed UnimplementedAddJobServer
// for forward compatibility
type AddJobServer interface {
	AddJob(context.Context, *AddJobRequest) (*job.JobInfo, error)
	mustEmbedUnimplementedAddJobServer()
}

// UnimplementedAddJobServer must be embedded to have forward compatible implementations.
type UnimplementedAddJobServer struct {
}

func (UnimplementedAddJobServer) AddJob(context.Context, *AddJobRequest) (*job.JobInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJob not implemented")
}
func (UnimplementedAddJobServer) mustEmbedUnimplementedAddJobServer() {}

// UnsafeAddJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddJobServer will
// result in compilation errors.
type UnsafeAddJobServer interface {
	mustEmbedUnimplementedAddJobServer()
}

func RegisterAddJobServer(s grpc.ServiceRegistrar, srv AddJobServer) {
	s.RegisterService(&AddJob_ServiceDesc, srv)
}

func _AddJob_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddJobServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addjob.AddJob/AddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddJobServer).AddJob(ctx, req.(*AddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddJob_ServiceDesc is the grpc.ServiceDesc for AddJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "addjob.AddJob",
	HandlerType: (*AddJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddJob",
			Handler:    _AddJob_AddJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiserver/addjob/add_job.proto",
}
